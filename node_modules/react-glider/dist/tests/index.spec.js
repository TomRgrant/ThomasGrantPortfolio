"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("@testing-library/react");
require("@testing-library/jest-dom");
var react_2 = require("react");
var index_1 = __importDefault(require("../src/index"));
describe("GliderComponent", function () {
    it("renders correctly with default props", function () {
        var container = (0, react_1.render)((0, jsx_runtime_1.jsxs)(index_1.default, { children: [(0, jsx_runtime_1.jsx)("div", { children: "Slide 1" }), (0, jsx_runtime_1.jsx)("div", { children: "Slide 2" })] })).container;
        expect(container.querySelector(".glider")).toBeInTheDocument();
    });
    it("renders arrows when hasArrows is true", function () {
        var container = (0, react_1.render)((0, jsx_runtime_1.jsxs)(index_1.default, __assign({ hasArrows: true }, { children: [(0, jsx_runtime_1.jsx)("div", { children: "Slide 1" }), (0, jsx_runtime_1.jsx)("div", { children: "Slide 2" })] }))).container;
        expect(container.querySelector(".glider-prev")).toBeInTheDocument();
        expect(container.querySelector(".glider-next")).toBeInTheDocument();
    });
    it("calls onLoad when the component is initialized", function () {
        var onLoadMock = jest.fn();
        (0, react_1.render)((0, jsx_runtime_1.jsxs)(index_1.default, __assign({ onLoad: onLoadMock }, { children: [(0, jsx_runtime_1.jsx)("div", { children: "Slide 1" }), (0, jsx_runtime_1.jsx)("div", { children: "Slide 2" })] })));
        expect(onLoadMock).toHaveBeenCalled();
    });
    it("calls event listeners when events are triggered", function () {
        var onSlideVisibleMock = jest.fn();
        var onAnimatedMock = jest.fn();
        var container = (0, react_1.render)((0, jsx_runtime_1.jsxs)(index_1.default, __assign({ onSlideVisible: onSlideVisibleMock, onAnimated: onAnimatedMock }, { children: [(0, jsx_runtime_1.jsx)("div", { children: "Slide 1" }), (0, jsx_runtime_1.jsx)("div", { children: "Slide 2" })] }))).container;
        var gliderElement = container.querySelector(".glider-contain > div");
        if (gliderElement) {
            (0, react_1.fireEvent)(gliderElement, new CustomEvent("glider-slide-visible"));
            (0, react_1.fireEvent)(gliderElement, new CustomEvent("glider-animated"));
        }
        expect(onSlideVisibleMock).toHaveBeenCalled();
        expect(onAnimatedMock).toHaveBeenCalled();
    });
    it("exposes the glider instance via ref", function () {
        var ref = (0, react_2.createRef)();
        (0, react_1.render)((0, jsx_runtime_1.jsxs)(index_1.default, __assign({ ref: ref }, { children: [(0, jsx_runtime_1.jsx)("div", { children: "Slide 1" }), (0, jsx_runtime_1.jsx)("div", { children: "Slide 2" })] })));
        expect(ref.current).not.toBeNull();
    });
    it("renders dots when hasDots is true", function () {
        var container = (0, react_1.render)((0, jsx_runtime_1.jsxs)(index_1.default, __assign({ hasDots: true }, { children: [(0, jsx_runtime_1.jsx)("div", { children: "Slide 1" }), (0, jsx_runtime_1.jsx)("div", { children: "Slide 2" })] }))).container;
        expect(container.querySelectorAll(".glider-dot")).toHaveLength(2);
    });
    it("renders dots in a custom element", function () {
        var container = (0, react_1.render)((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(index_1.default, __assign({ hasDots: true, dots: ".dots" }, { children: [(0, jsx_runtime_1.jsx)("div", { children: "Slide 1" }), (0, jsx_runtime_1.jsx)("div", { children: "Slide 2" })] })), (0, jsx_runtime_1.jsx)("div", { className: "dots" })] })).container;
        expect(container.querySelectorAll(".dots > .glider-dot")).toHaveLength(2);
    });
});
//# sourceMappingURL=index.spec.js.map