"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var src_1 = __importDefault(require("../src"));
function RefGlider() {
    var gliderRef = (0, react_1.useRef)(null);
    return ((0, jsx_runtime_1.jsxs)("div", __assign({ className: "container" }, { children: [(0, jsx_runtime_1.jsx)("button", __assign({ type: "button", onClick: function () {
                    var _a;
                    var random = Math.floor(Math.random() * 12);
                    (_a = gliderRef.current) === null || _a === void 0 ? void 0 : _a.scrollItem(random);
                } }, { children: "Scroll to random item" })), (0, jsx_runtime_1.jsxs)(src_1.default, __assign({ className: "glider-container", draggable: true, hasDots: true, slidesToShow: 1, scrollLock: true, ref: gliderRef }, { children: [(0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "1" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "2" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "3" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "4" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "5" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "6" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "7" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "8" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "9" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "10" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "11" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "12" }) }))] })), (0, jsx_runtime_1.jsxs)("details", { children: [(0, jsx_runtime_1.jsx)("summary", { children: "View Source Code" }), (0, jsx_runtime_1.jsx)("pre", { children: (0, jsx_runtime_1.jsx)("code", { children: "const gliderRef = useRef<GliderMethods>(null);\n\nreturn (\n  <button\n    type=\"button\"\n    onClick={() => {\n      const random = Math.floor(Math.random() * 12);\n      gliderRef.current?.scrollItem(random);\n    }}\n  >\n    Scroll to random item\n  </button>\n  <Glider\n    className=\"glider-container\"\n    draggable\n    hasDots\n    slidesToShow={1}\n    scrollLock\n    ref={gliderRef}\n  >\n    <div>\n      <span>1</span>\n    </div>\n  </Glider>\n);" }) })] })] })));
}
exports.default = RefGlider;
//# sourceMappingURL=gliderMethods.js.map