"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var src_1 = __importDefault(require("../src"));
function AutoplayGlider() {
    var INTERVAL = 5000;
    var MAX = 11;
    var intervalRef = (0, react_1.useRef)(null);
    var callbackRef = (0, react_1.useCallback)(function (glider) {
        if (glider) {
            if (!intervalRef.current) {
                intervalRef.current = setInterval(function () {
                    var index = glider.page;
                    if (index < MAX) {
                        index += 1;
                    }
                    else {
                        index = 0;
                    }
                    glider.scrollItem(index, false);
                }, INTERVAL);
            }
        }
    }, []);
    (0, react_1.useEffect)(function () { return function () {
        if (intervalRef.current) {
            clearInterval(intervalRef.current);
            intervalRef.current = null;
        }
    }; }, []);
    return ((0, jsx_runtime_1.jsxs)("div", __assign({ className: "container" }, { children: [(0, jsx_runtime_1.jsxs)(src_1.default, __assign({ className: "glider-container", draggable: true, hasDots: true, slidesToShow: 1, scrollLock: true, ref: callbackRef }, { children: [(0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "1" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "2" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "3" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "4" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "5" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "6" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "7" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "8" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "9" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "10" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "11" }) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: "slide" }, { children: (0, jsx_runtime_1.jsx)("span", { children: "12" }) }))] })), (0, jsx_runtime_1.jsxs)("details", { children: [(0, jsx_runtime_1.jsx)("summary", { children: "View Source Code" }), (0, jsx_runtime_1.jsx)("pre", { children: (0, jsx_runtime_1.jsx)("code", { children: "const intervalRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n\nconst callbackRef = useCallback((glider: GliderType) => {\n  if (glider) {\n    if (!intervalRef.current) {\n      intervalRef.current = setInterval(() => {\n        let index = glider.page;\n        if (index < MAX) {\n          index += 1;\n        } else {\n          index = 0;\n        }\n        glider.scrollItem(index, false);\n      }, INTERVAL);\n    }\n  }\n}, []);\n\nuseEffect(\n  () => () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n  },\n  []\n);\n\nreturn (\n  <Glider\n    className=\"glider-container\"\n    draggable\n    hasDots\n    slidesToShow={1}\n    scrollLock\n    ref={callbackRef}\n  >\n    <div>\n      <span>1</span>\n    </div>\n  </Glider>\n);" }) })] })] })));
}
exports.default = AutoplayGlider;
//# sourceMappingURL=autoplayGlider.js.map